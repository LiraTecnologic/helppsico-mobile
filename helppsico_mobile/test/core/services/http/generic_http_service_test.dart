import 'dart:convert';
import 'package:flutter_test/flutter_test.dart';
import 'package:helppsico_mobile/core/services/http/generic_http_service.dart';
import 'package:helppsico_mobile/core/services/storage/secure_storage_service.dart';
import 'package:http/http.dart' as http;
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

import 'generic_http_service_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([http.Client, SecureStorageService])
void main() {
  late MockClient mockHttpClient;
  late MockSecureStorageService mockStorageService;
  late GenericHttp genericHttp;

  setUp(() {
    mockHttpClient = MockClient();
    mockStorageService = MockSecureStorageService();
    genericHttp = GenericHttp(client: mockHttpClient, storage: mockStorageService);
  });

  const String testUrl = 'http://example.com/test';
  const String mockToken = 'mock_token';

  group('GenericHttp GET', () {
    test('should perform GET request with token and return HttpResponse with JSON body', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.get(Uri.parse(testUrl), headers: {'Authorization': 'Bearer $mockToken'}))
          .thenAnswer((_) async => http.Response(json.encode({'key': 'value'}), 200, headers: {'content-type': 'application/json'}));

      // Act
      final response = await genericHttp.get(testUrl);

      // Assert
      expect(response.statusCode, 200);
      expect(response.body, {'key': 'value'});
      verify(mockStorageService.getToken()).called(1);
      verify(mockHttpClient.get(Uri.parse(testUrl), headers: {'Authorization': 'Bearer $mockToken'})).called(1);
    });

    test('should perform GET request without token and return HttpResponse with text body', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => null);
      when(mockHttpClient.get(Uri.parse(testUrl), headers: {}))
          .thenAnswer((_) async => http.Response('Success', 200, headers: {'content-type': 'text/plain'}));

      // Act
      final response = await genericHttp.get(testUrl);

      // Assert
      expect(response.statusCode, 200);
      expect(response.body, 'Success');
    });

     test('should perform GET request with additional headers', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      final additionalHeaders = {'X-Custom-Header': 'value'};
      final expectedHeaders = {'Authorization': 'Bearer $mockToken', ...additionalHeaders};
      when(mockHttpClient.get(Uri.parse(testUrl), headers: expectedHeaders))
          .thenAnswer((_) async => http.Response(json.encode({'key': 'value'}), 200, headers: {'content-type': 'application/json'}));

      // Act
      final response = await genericHttp.get(testUrl, headers: additionalHeaders);

      // Assert
      expect(response.statusCode, 200);
      verify(mockHttpClient.get(Uri.parse(testUrl), headers: expectedHeaders)).called(1);
    });

    test('should rethrow exception on http client error during GET', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.get(any, headers: any)).thenThrow(Exception('Network error'));

      // Act & Assert
      expect(() => genericHttp.get(testUrl), throwsA(isA<Exception>()));
    });
  });

  group('GenericHttp POST', () {
    final postBody = {'data': 'sample'};
    test('should perform POST request with token and return HttpResponse', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.post(Uri.parse(testUrl), headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $mockToken'}, body: json.encode(postBody)))
          .thenAnswer((_) async => http.Response(json.encode({'status': 'created'}), 201, headers: {'content-type': 'application/json'}));

      // Act
      final response = await genericHttp.post(testUrl, postBody);

      // Assert
      expect(response.statusCode, 201);
      expect(response.body, {'status': 'created'});
      verify(mockStorageService.getToken()).called(1);
      verify(mockHttpClient.post(Uri.parse(testUrl), headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $mockToken'}, body: json.encode(postBody))).called(1);
    });

    test('should perform POST request with additional headers', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      final additionalHeaders = {'X-Custom-Header': 'value'};
      final expectedHeaders = {'Content-Type': 'application/json', 'Authorization': 'Bearer $mockToken', ...additionalHeaders};
      when(mockHttpClient.post(Uri.parse(testUrl), headers: expectedHeaders, body: json.encode(postBody)))
          .thenAnswer((_) async => http.Response(json.encode({'status': 'created'}), 201, headers: {'content-type': 'application/json'}));

      // Act
      final response = await genericHttp.post(testUrl, postBody, headers: additionalHeaders);

      // Assert
      expect(response.statusCode, 201);
      verify(mockHttpClient.post(Uri.parse(testUrl), headers: expectedHeaders, body: json.encode(postBody))).called(1);
    });

    test('should rethrow exception on http client error during POST', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.post(any, headers: any, body: any)).thenThrow(Exception('Network error'));

      // Act & Assert
      expect(() => genericHttp.post(testUrl, postBody), throwsA(isA<Exception>()));
    });
  });

  group('GenericHttp PUT', () {
    final putBody = {'data': 'updated'}; 
    test('should perform PUT request with token and return HttpResponse', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.put(Uri.parse(testUrl), headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $mockToken'}, body: json.encode(putBody)))
          .thenAnswer((_) async => http.Response(json.encode({'status': 'updated'}), 200, headers: {'content-type': 'application/json'}));

      // Act
      final response = await genericHttp.put(testUrl, putBody);

      // Assert
      expect(response.statusCode, 200);
      expect(response.body, {'status': 'updated'});
    });

    test('should rethrow exception on http client error during PUT', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.put(any, headers: any, body: any)).thenThrow(Exception('Network error'));

      // Act & Assert
      expect(() => genericHttp.put(testUrl, putBody), throwsA(isA<Exception>()));
    });
  });

  group('GenericHttp DELETE', () {
    test('should perform DELETE request with token and return HttpResponse', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.delete(Uri.parse(testUrl), headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $mockToken'}))
          .thenAnswer((_) async => http.Response('', 204, headers: {'content-type': 'application/json'})); // Empty body for 204

      // Act
      final response = await genericHttp.delete(testUrl);

      // Assert
      expect(response.statusCode, 204);
      expect(response.body, {}); // Empty JSON object for empty body
    });

     test('should perform DELETE request with token and return HttpResponse with JSON body', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.delete(Uri.parse(testUrl), headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $mockToken'}))
          .thenAnswer((_) async => http.Response(json.encode({'message': 'deleted'}), 200, headers: {'content-type': 'application/json'}));

      // Act
      final response = await genericHttp.delete(testUrl);

      // Assert
      expect(response.statusCode, 200);
      expect(response.body, {'message': 'deleted'});
    });

    test('should rethrow exception on http client error during DELETE', () async {
      // Arrange
      when(mockStorageService.getToken()).thenAnswer((_) async => mockToken);
      when(mockHttpClient.delete(any, headers: any)).thenThrow(Exception('Network error'));

      // Act & Assert
      expect(() => genericHttp.delete(testUrl), throwsA(isA<Exception>()));
    });
  });

   group('Response body parsing', () {
    test('should parse JSON response body correctly', () async {
      when(mockStorageService.getToken()).thenAnswer((_) async => null);
      when(mockHttpClient.get(Uri.parse(testUrl), headers: {}))
          .thenAnswer((_) async => http.Response(json.encode({'data': 'json_data'}), 200, headers: {'content-type': 'application/json; charset=utf-8'}));
      final response = await genericHttp.get(testUrl);
      expect(response.body, {'data': 'json_data'});
    });

    test('should return plain text for non-JSON response body', () async {
      when(mockStorageService.getToken()).thenAnswer((_) async => null);
      when(mockHttpClient.get(Uri.parse(testUrl), headers: {}))
          .thenAnswer((_) async => http.Response('plain text', 200, headers: {'content-type': 'text/html'}));
      final response = await genericHttp.get(testUrl);
      expect(response.body, 'plain text');
    });

    test('should return plain text if JSON decoding fails', () async {
      when(mockStorageService.getToken()).thenAnswer((_) async => null);
      when(mockHttpClient.get(Uri.parse(testUrl), headers: {}))
          .thenAnswer((_) async => http.Response('invalid json', 200, headers: {'content-type': 'application/json'}));
      final response = await genericHttp.get(testUrl);
      expect(response.body, 'invalid json');
    });

    test('DELETE with empty response body should result in empty map', () async {
      when(mockStorageService.getToken()).thenAnswer((_) async => null);
      when(mockHttpClient.delete(Uri.parse(testUrl), headers: {'Content-Type': 'application/json'}))
          .thenAnswer((_) async => http.Response('', 204, headers: {'content-type': 'application/json'}));
      final response = await genericHttp.delete(testUrl);
      expect(response.body, {});
    });
  });
}