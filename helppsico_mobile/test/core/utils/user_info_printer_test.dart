import 'package:flutter_test/flutter_test.dart';
import 'package:helppsico_mobile/core/services/auth/auth_service.dart';
import 'package:helppsico_mobile/core/services/storage/secure_storage_service.dart';
import 'package:helppsico_mobile/core/utils/user_info_printer.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

import 'user_info_printer_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([AuthService, SecureStorageService])
void main() {
  late MockAuthService mockAuthService;
  late MockSecureStorageService mockSecureStorageService;
  late UserInfoPrinter userInfoPrinter;

  setUp(() {
    mockAuthService = MockAuthService();
    mockSecureStorageService = MockSecureStorageService();
    userInfoPrinter = UserInfoPrinter(
      authService: mockAuthService,
      storage: mockSecureStorageService,
    );
  });

  group('UserInfoPrinter', () {
    const testToken = 'test_token';
    const testUserData = '{"name":"Test User"}';

    test('printUserInfo should call getToken and getUserData and print info', () async {
      when(mockAuthService.getToken()).thenAnswer((_) async => testToken);
      when(mockSecureStorageService.getUserData()).thenAnswer((_) async => testUserData);

      await userInfoPrinter.printUserInfo();

      verify(mockAuthService.getToken()).called(1);
      verify(mockSecureStorageService.getUserData()).called(1);
    });

    test('printUserInfo should handle null token and null user data gracefully', () async {
      when(mockAuthService.getToken()).thenAnswer((_) async =>Future.value(null));
      when(mockSecureStorageService.getUserData()).thenAnswer((_) async => null);

      await userInfoPrinter.printUserInfo();

      verify(mockAuthService.getToken()).called(1);
      verify(mockSecureStorageService.getUserData()).called(1);
    });

    test('printUserInfo should print error message if getToken throws exception', () async {
      final exception = Exception('Auth error');
      when(mockAuthService.getToken()).thenThrow(exception);
      when(mockSecureStorageService.getUserData()).thenAnswer((_) async => testUserData);

      await userInfoPrinter.printUserInfo();

      verify(mockAuthService.getToken()).called(1);
      verifyNever(mockSecureStorageService.getUserData());
    });

    test('printUserInfo should print error message if getUserData throws exception', () async {
      final exception = Exception('Storage error');
      when(mockAuthService.getToken()).thenAnswer((_) async => testToken);
      when(mockSecureStorageService.getUserData()).thenThrow(exception);

      await userInfoPrinter.printUserInfo();

      verify(mockAuthService.getToken()).called(1);
      verify(mockSecureStorageService.getUserData()).called(1);
    });

    test('printUserInfo should print error message if both services throw exceptions', () async {
      final authException = Exception('Auth error');
      final storageException = Exception('Storage error');
      when(mockAuthService.getToken()).thenThrow(authException);
      when(mockSecureStorageService.getUserData()).thenThrow(storageException);

      await userInfoPrinter.printUserInfo();

      verify(mockAuthService.getToken()).called(1);
      verifyNever(mockSecureStorageService.getUserData());
    });
  });
}